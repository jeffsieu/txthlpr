{"version":3,"sources":["tools/string-utils.ts","tools/string-tools.ts","tools/tools.ts","tools/json-tools.ts","tools/list-tools.ts","tools/number-tools.ts","tools/types.ts","components/ToolListItem.tsx","components/ToolList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["truncate","input","length","substring","stringify","name","description","transform","Array","isArray","join","undefined","JSON","toString","inputType","outputType","getHistoryDescription","replaceStringAtIndex","str","replaceValue","index","findValueLength","includeMode","beforeSubstring","afterSubstring","console","log","tools","trim","this","params","findRegex","replaceRegex","replaceMode","value","previousOutput","output","startPosition","indexOf","lastIndexOf","required","valueType","choiceType","choices","parse","unescapedDelimiter","delimiter","replaceAll","split","filterCondition","filter","Number","operation","operand","isMultipleChoiceParam","param","DataBuilder","data","UnitData","ListData","JsonData","type","tool","transformedData","get","from","rawChildren","children","childrenTypes","Set","child","add","getType","push","childData","map","typePath","assert","childrenTransformedWith","slice","transformedWith","json","Map","Object","entries","entry","key","set","entryIterator","next","done","keyData","valueData","fromEntries","ToolListItem","props","updateTool","isFocused","isError","onClick","onDelete","useState","hasParams","setParams","updateParams","newTool","onParamChange","newValue","newParamValue","newParams","style","opacity","ListItem","button","ListItemAvatar","Avatar","ListItemText","primary","secondary","Fragment","IconButton","aria-label","event","stopPropagation","Clear","Alert","severity","Box","ml","mr","mb","Typography","variant","onSubmit","preventDefault","autoComplete","keys","my","FormControl","InputLabel","id","Select","labelId","label","onChange","target","choice","MenuItem","TextField","fullWidth","Button","ToolList","toolMap","addTool","self","mt","color","component","Tooltip","title","marginRight","Card","CardContent","gutterBottom","values","theme","createTheme","palette","mode","main","text","background","default","paper","typography","fontFamily","TransformationException","getToolsForData","toolsByCategory","reduce","entryMap","e","categoryName","childrenMap","childrenTypesArray","find","currValue","getChildrenTools","App","selectedStepIndex","setSelectedStepIndex","initialData","useMemo","useJson5","setUseJson5","stringifyListAsJson","setStringifyListAsJson","toolHistory","setToolHistory","prevValue","currTool","currentIndex","Math","min","Infinity","exception","currentStepIndex","currentData","fakeStep","fullHistory","JSON5","quote","space","wordCount","newToolHistory","pop","currentDataType","categorizedTools","allTools","isLgDown","useMediaQuery","breakpoints","down","ThemeProvider","className","display","CssBaseline","Drawer","sx","width","flexShrink","boxSizing","anchor","marginX","mx","removeStep","Divider","flexGrow","bgcolor","p","Grid","container","item","xs","lg","noValidate","_","minRows","maxRows","multiline","FormControlLabel","control","Checkbox","checked","src","collapseStringsAfterLength","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78a13431.chunk.js","sourcesContent":["const limit = 10;\n\nexport function truncate(input: string): string {\n  return input.length > limit ? input.substring(0, limit) + '...': input;\n}","import { truncate } from \"./string-utils\";\nimport { Tool } from \"./types\";\n\nexport const trim: Tool<string, string> = {\n  name: \"Trim\",\n  description: \"Remove whitespace from both ends of the input.\",\n  transform: (input: string) => {\n    return input.trim();\n  },\n  inputType: \"string\",\n  outputType: \"string\",\n  getHistoryDescription: function () {\n    return \"Trimmed whitespace\";\n  },\n};\n\nexport const stringify: Tool<any, string> = {\n  name: \"Stringify\",\n  description: \"Converts the given input into a string.\",\n  transform: (input: any) => {\n    if (Array.isArray(input)) {\n      return \"[\\n  \" + input.join(\",\\n  \") + \",\\n]\";\n    } else if (typeof input === \"object\" && input !== undefined) {\n      return JSON.stringify(input);\n    }\n    return input.toString();\n  },\n  inputType: \"any\",\n  outputType: \"string\",\n  getHistoryDescription: function () {\n    return \"Converted to string\";\n  },\n};\n\nconst replaceModeParamChoices = [\n  \"First occurrence\",\n  \"Last occurrence\",\n  \"All occurrences\",\n] as const;\n\nconst includeParamChoices = [\n  \"Nothing else\",\n  \"Everything after\",\n  \"Everything before\",\n] as const;\n\nconst replaceParameters = {\n  findRegex: {\n    name: \"Find expression\",\n    value: \"\",\n    required: true,\n    valueType: \"string\",\n    choiceType: \"freeResponse\",\n  },\n  replaceMode: {\n    name: \"Replace mode\",\n    value: \"All occurrences\" as typeof replaceModeParamChoices[number],\n    required: true,\n    valueType: \"string\",\n    choiceType: \"multipleChoice\",\n    choices: replaceModeParamChoices,\n  },\n  includeMode: {\n    name: \"Include\",\n    value: \"Nothing else\" as typeof includeParamChoices[number],\n    required: true,\n    valueType: \"string\",\n    choiceType: \"multipleChoice\",\n    choices: includeParamChoices,\n  },\n  replaceRegex: {\n    name: \"Replace expression\",\n    value: \"\",\n    required: true,\n    valueType: \"string\",\n    choiceType: \"freeResponse\",\n  },\n} as const;\n\nconst replaceStringAtIndex = (str: string, replaceValue: string, index: number, findValueLength: number, includeMode: typeof includeParamChoices[number]): string => {\n  if (index === -1) {\n    return str;\n  } else {\n    const beforeSubstring = str.substring(0, index);\n    const afterSubstring = str.substring(index + findValueLength, str.length);\n    switch (includeMode) {\n      case \"Nothing else\":\n        return beforeSubstring + replaceValue + afterSubstring;\n      case \"Everything before\":\n        return replaceValue + afterSubstring;\n      case \"Everything after\":\n        return beforeSubstring + replaceValue;\n    }\n    console.log(\"gay!\");\n  }\n}\n\nexport const replace: Tool<string, string, typeof replaceParameters> = {\n  name: \"Replace\",\n  description: \"Replaces the input into a string.\",\n  transform: function (input: string) {\n    const { findRegex, replaceRegex, replaceMode, includeMode } = this.params;\n    switch (replaceMode.value) {\n      case \"All occurrences\":\n        let previousOutput = input;\n        let output: string | undefined = undefined;\n        let startPosition = 0;\n        do {\n          console.log(\"yo!!!\")\n          console.log(previousOutput);\n          console.log(output);\n          console.log(startPosition);\n          if (output !== undefined)\n            previousOutput = output;\n          const index = previousOutput.indexOf(findRegex.value, startPosition);\n          if (index !== -1) {\n            // new start position after string gets replaced\n            startPosition = index + replaceRegex.value.length;\n          } else {\n            return previousOutput;\n          }\n          output = replaceStringAtIndex(previousOutput, replaceRegex.value, index, findRegex.value.length, includeMode.value);\n        } while (output !== previousOutput);\n        return output;\n      case \"First occurrence\":\n      case \"Last occurrence\":\n        const index = replaceMode.value === \"First occurrence\" ? input.indexOf(findRegex.value) : input.lastIndexOf(findRegex.value);\n        return replaceStringAtIndex(input, replaceRegex.value, index, findRegex.value.length, includeMode.value);\n    }\n  },\n  inputType: \"string\",\n  outputType: \"string\",\n  params: replaceParameters,\n  getHistoryDescription: function () {\n    return `Replace ${truncate(this.params.findRegex.value)} with ${truncate(\n      this.params.findRegex.value\n    )}`;\n  },\n};\n","import { convertToJson } from './json-tools';\nimport { stringToList, listToString, listFilter } from './list-tools';\nimport { manipulateNumber, stringToNumber } from './number-tools';\nimport { trim, stringify, replace } from './string-tools';\n\nconst stringTools = [trim, stringify, replace];\nconst jsonTools = [convertToJson];\nconst listTools = [stringToList, listToString, listFilter];\nconst numberTools = [stringToNumber, manipulateNumber];\n\nconst tools = [...stringTools, ...jsonTools, ...listTools, ...numberTools];\n\nexport { tools }","import { json, Tool } from \"./types\";\n\nexport const convertToJson: Tool<string, json> = {\n  name: 'Parse JSON',\n  description: 'Parse the given string into a JSON.',\n  transform: (input: string) => { \n    return JSON.parse(input);\n  },\n  getHistoryDescription: function() {\n    return 'Parsed string to JSON';\n  },\n  inputType: 'string',\n  outputType: 'json',\n}","import { Tool } from \"./types\";\n\nconst stringToListParameters = {\n  delimiter: {\n    name: \"Delimiter\",\n    value: \",\",\n    valueType: \"string\",\n    required: true,\n    choiceType: \"freeResponse\",\n  },\n} as const;\n\nexport const stringToList: Tool<\n  string,\n  string[],\n  typeof stringToListParameters\n> = {\n  name: \"Split\",\n  description: \"Converts the input string into a list, given a delimiter.\",\n  transform: function (input: string): any[] {\n    const unescapedDelimiter = this.params.delimiter.value.replaceAll(\n      \"\\\\n\",\n      \"\\n\"\n    );\n    return input.split(unescapedDelimiter);\n  },\n  params: stringToListParameters,\n  inputType: \"string\",\n  outputType: \"list\",\n  getHistoryDescription: function () {\n    return `Split text to list using \"${this.params.delimiter.value}\"`;\n  },\n};\n\nconst listToStringParameters = {\n  delimiter: {\n    name: \"Join\",\n    value: \",\",\n    valueType: \"string\",\n    required: true,\n    choiceType: \"freeResponse\",\n  },\n} as const;\n\nexport const listToString: Tool<\n  string[],\n  string,\n  typeof listToStringParameters\n> = {\n  name: \"Join\",\n  description: \"Joins the input list into a string, given a delimiter.\",\n  transform: function (input: string[]): string {\n    const unescapedDelimiter = this.params.delimiter.value.replaceAll(\n      \"\\\\n\",\n      \"\\n\"\n    );\n    return input.join(unescapedDelimiter);\n  },\n  params: listToStringParameters,\n  inputType: \"list\",\n  outputType: \"string\",\n  getHistoryDescription: function () {\n    return `Joined text using \"${this.params.delimiter.value}\"`;\n  },\n};\n\nconst filterConditionChoices = [\"Remove empty\"];\n\nconst filterParameters = {\n  filterCondition: {\n    name: \"Filter condition\",\n    value: \"Remove empty\" as typeof filterConditionChoices[number],\n    required: true,\n    choiceType: \"multipleChoice\",\n    choices: filterConditionChoices,\n  },\n} as const;\n\nexport const listFilter: Tool<string[], string[], typeof filterParameters> = {\n  name: \"Filter\",\n  description: \"Filters the list using a given condition.\",\n  transform: function (input: string[]): string[] {\n    switch (this.params.filterCondition.value) {\n      case \"Remove empty\": {\n        return input.filter((value) => value !== \"\");\n      }\n    }\n    return [...input];\n  },\n  params: filterParameters,\n  inputType: \"list\",\n  outputType: \"list\",\n  getHistoryDescription: function () {\n    return `Filtered the list using ${this.params.filterCondition.value}`;\n  },\n};\n","import { Tool } from \"./types\";\n\nexport const stringToNumber: Tool<string, number> = {\n  name: 'Parse number',\n  description: 'Parse the given string into a number.',\n  transform: (input: string) => { \n    return Number(input);\n  },\n  getHistoryDescription: function() {\n    return 'Parsed string to number';\n  },\n  inputType: 'string',\n  outputType: 'number',\n}\n\nconst operationChoices = [\n  'Add',\n  'Subtract',\n  'Multiply',\n  'Divide',\n] as const;\n\nconst manipulateNumberParams = {\n  operation: {\n    name: 'Operation',\n    value: 'Add' as typeof operationChoices[number],\n    valueType: 'string',\n    choiceType: 'multipleChoice',\n    choices: operationChoices,\n    required: true,\n  },\n  operand: {\n    name: 'Operand',\n    value: 0,\n    valueType: 'number',\n    choiceType: 'freeResponse',\n    required: true,\n  },\n} as const;\n\nexport const manipulateNumber: Tool<number, number, typeof manipulateNumberParams> = {\n  name: 'Arithmetic',\n  description: 'Perform arithmetic operations on the given number.',\n  transform: function (input: number) {\n    switch (this.params.operation.value) {\n      case 'Add':\n        return input + this.params.operand.value;\n      case 'Subtract':\n        return input - this.params.operand.value;\n      case 'Multiply':\n        return input * this.params.operand.value;\n      case 'Divide':\n        return input / this.params.operand.value;\n    }\n  },\n  getHistoryDescription: function() {\n    return 'Parsed string to number';\n  },\n  inputType: 'number',\n  outputType: 'number',\n  params: manipulateNumberParams,\n}","import { strict as assert } from \"assert\";\n\nexport type Tool<S extends DataType, T extends DataType, P extends ToolParameters | undefined = undefined> = \n  P extends ToolParameters ? \n   ToolWithParams<S, T, P> : BaseTool<S, T>;\n\nexport type ElementWiseTool<S extends DataType, T extends DataType, P extends ToolParameters | undefined = undefined> = Tool<S, T, P> & {\n  isElementWise: true,\n};\n\nexport function isElementWiseTool(tool: Tool<any, any, any>): tool is ElementWiseTool<any, any, any> {\n  return (tool as ElementWiseTool<any, any>).isElementWise !== undefined;\n}\n\ntype ToolWithParams<S extends DataType, T extends DataType, P extends ToolParameters> = BaseTool<S, T> & {\n  params: P,\n}\n\nexport function hasParams<S extends DataType, T extends DataType>(tool: Tool<S, T>): tool is ToolWithParams<S, T, any> {\n  return (tool as any).params !== undefined;\n}\n\ntype BaseTool<S extends DataType, T extends DataType> = {\n  name: string,\n  description: string,\n  transform: (input: S) => T,\n  getHistoryDescription: () => string,\n  inputType: TypeName<S>,\n  outputType: TypeName<T>,\n}\n\nexport type ToolParameters = {\n  [key: string]: ToolParameter<any>,\n}\n\n/// So that the app knows how to handle nested tools\nexport type ToolWithTypePath<S extends DataType, T extends DataType, P extends ToolParameters | undefined = undefined> = Tool<S, T, P> & {\n  typePath: TypeName<any>[],\n}\n\nexport type ToolParameter<Type extends ToolParameterType> = ToolValueParameter<Type> | ToolOptionParameter<Type, readonly string[]>;\n\ntype BaseToolParameter<Type extends ToolParameterType> = {\n  name: string,\n  value: Type,\n  required: boolean,\n}\n\ntype ToolValueParameter<Type extends ToolParameterType> = BaseToolParameter<Type> & {\n  value: Type,\n  valueType: TypeName<Type>,\n  choiceType: 'freeResponse',\n};\n\ntype ToolOptionParameter<Type extends ToolParameterType, ToolOption extends readonly string[]> = BaseToolParameter<Type> & {\n  value: ElementType<ToolOption>,\n  choiceType: 'multipleChoice',\n  choices: ToolOption,\n}\n\n// type FreeResponseParamType = 'freeResponse';\n// type MultipleChoiceParamType = 'multipleChoice';\n// export type ToolParameterChoiceType = FreeResponseParamType | MultipleChoiceParamType;\n\nexport function isMultipleChoiceParam<Type extends ToolParameterType>(param: ToolParameter<Type>): param is ToolOptionParameter<Type, readonly string[]> {\n  return param.choiceType === 'multipleChoice';\n}\n\nexport type json = any;\nexport type SingleDataType = string | boolean | number;\nexport type MultiDataType = json | ListDataType<DataType>;\n\nexport type DataType = SingleDataType | json | MultiDataType;\n\nexport type TypeName<T extends DataType> =\n    T extends string ? 'string' :\n    T extends boolean ? 'boolean' :\n    T extends number ? 'number' :\n    T extends any[] ? 'list' : 'json' | 'any';\n\nexport interface ListDataType<T extends DataType> extends Array<Data<T>> {\n}\n\nexport type ElementType < T extends ReadonlyArray < unknown > > = T extends ReadonlyArray<\n  infer ElementType\n>\n  ? ElementType\n  : never\n\nexport type SelfToolMap = Map<string, ToolMapValue>;\n\nexport type ToolMap = {\n  self: SelfToolMap,\n  type: TypeName<any>,\n  children?: ChildrenToolMap,\n}\n\nexport type ToolMapValue = Tool<any, any>[];\n\nexport type ChildrenToolMap = Map<string, ToolMap>;\n\nexport type ToolParameterType = string | boolean;\n\nexport interface Data<T extends DataType> {\n  get(): T;\n  getType(): TypeName<T>;\n  transformedWith<OutputType extends DataType>(tool: ToolWithTypePath<T, OutputType>): Data<OutputType>;\n}\nexport class DataBuilder {\n\n  static from<T extends DataType>(data: T): Data<any> {\n    if (typeof data === 'string') {\n      return new UnitData<string>(data, 'string');\n    } else if (typeof data === 'number') {\n      return new UnitData<number>(data, 'number');\n    } else if (Array.isArray(data)) {\n      return new ListData(data);\n    } else if (typeof data === 'object' && data !== null) {\n      return new JsonData(data);\n    } else {\n      return new UnitData<unknown>(data, 'any');\n    }\n  }\n\n  // static from<T extends DataType>(data: T, type: TypeName<T>): Data<T> {\n  //   if (Array.isArray(data)) {\n  //     return (new ListData(data) as any);\n  //   } else {\n  //     return new UnitData(data, type);\n  //   }\n  // }\n}\n\nexport class UnitData<T extends DataType> implements Data<T> {\n  data: T;\n  type: TypeName<T>;\n\n  constructor(data: T, type: TypeName<T>) {\n    this.data = data;\n    this.type = type;\n  }\n\n  get(): T {\n    return this.data;\n  }\n\n  getType(): TypeName<T> {\n    return this.type;\n  }\n\n  transformedWith<OutputType extends DataType>(tool: ToolWithTypePath<T, OutputType>): Data<OutputType> {\n    const transformedData = tool.transform(this.get());\n    return DataBuilder.from(transformedData);\n  }\n}\n\nexport class ListData implements Data<any[]> {\n  children: Data<any>[];\n  childrenTypes: Set<TypeName<any>>;\n\n  constructor(rawChildren: any[]) {\n    this.childrenTypes = new Set();\n    const children = [];\n    for (let child of rawChildren) {\n      if (child instanceof UnitData || child instanceof ListData) {\n        this.childrenTypes.add(child.getType());\n        children.push(child);\n      } else {\n        const childData = DataBuilder.from(child);\n        this.childrenTypes.add(childData.getType());\n        children.push(childData);\n      }\n    }\n    this.children = children;\n  }\n\n  get(): any[] {\n    return this.children.map((child) => child.get());\n  }\n\n  getType(): TypeName<any[]> {\n    return 'list';\n  }\n\n  transformedWith<OutputType extends DataType>(tool: ToolWithTypePath<any[], OutputType>): Data<any> {\n     if (tool.typePath.length > 1) {\n       assert(tool.typePath[0] === 'list');\n       return this.childrenTransformedWith({\n        ...tool,\n        typePath: tool.typePath.slice(1),\n       });\n    } else {\n      const transformedData = tool.transform(this.get());\n      return DataBuilder.from(transformedData);\n    }\n  }\n\n  childrenTransformedWith<InputType extends DataType, OutputType extends DataType>(tool: ToolWithTypePath<InputType, OutputType>): ListData {\n    const transformFunction = (child: Data<any>): Data<any> | Data<OutputType> => {\n      if (tool.typePath[0] === child.getType()) {\n        return child.transformedWith(tool);\n        // return DataBuilder.from(tool.transform(child.get() as InputType));\n      } else {\n        return child;\n      }\n    }\n    const newData = this.children.map(transformFunction);\n    return new ListData(newData);\n  }\n}\n\n\nexport class JsonData implements Data<any> {\n  map: Map<UnitData<any>, Data<any>>;\n\n  constructor(json: any) {\n    assert(!Array.isArray(json));\n    const map = new Map();\n    // At this point, assume we have a valid json\n    for (var entry of Object.entries(json)) {\n      const [key, value] = entry;\n      map.set(DataBuilder.from(key) as UnitData<any>, DataBuilder.from(value));\n    }\n    this.map = map;\n  }\n\n  get(): any {\n    const entries = [];\n    const entryIterator = this.map.entries();\n    var entry = entryIterator.next();\n    while (!entry.done) {\n      const [keyData, valueData] = entry.value;\n      entries.push([keyData.get(), valueData.get()]);\n      entry = entryIterator.next();\n    }\n    return Object.fromEntries(entries);\n  }\n\n  getType(): TypeName<any> {\n    return 'json';\n  }\n\n  transformedWith<OutputType extends any>(tool: BaseTool<any, OutputType>): Data<OutputType> {\n    const transformedData = tool.transform(this.get());\n    return DataBuilder.from(transformedData);\n  }\n}\n","import React from 'react';\nimport { Alert, Avatar, Box, Button, FormControl, IconButton, InputLabel, ListItem, ListItemAvatar, ListItemText, MenuItem, Select, TextField, Typography } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { hasParams, DataType, isMultipleChoiceParam, ToolParameter, ToolParameterType, ToolWithTypePath } from \"../tools/types\";\nimport { Clear } from '@material-ui/icons';\n\ntype ToolListItemProps<S extends DataType, T extends DataType> = {\n  tool: ToolWithTypePath<S, T>,\n  updateTool: (toolWithTypePath: ToolWithTypePath<S, T>) => void,\n  index: number,\n  isFocused: boolean,\n  isError: boolean,\n  onClick: () => void,\n  onDelete: () => void,\n}\nconst ToolListItem: React.FC<ToolListItemProps<any, any>> = (props) => {\n  const { tool, updateTool, index, isFocused, isError, onClick, onDelete } = props;\n  const [params, setParams] = useState(hasParams(tool) ? tool.params : undefined);\n\n  const updateParams = () => {\n    const newTool: ToolWithTypePath<any, any, any> = {\n      ...tool,\n      params: params as any,\n    }\n    updateTool(newTool);\n  }\n\n  function onParamChange<T extends ToolParameterType> (param: ToolParameter<T>, key: string, newValue: typeof param.value) {\n    let newParamValue = newValue;\n    if (!isMultipleChoiceParam(param) && param.valueType === 'number')\n      newParamValue = Number(newValue) as unknown as typeof param.value;\n    const newParams = {\n      ...params,\n    };\n    newParams[key] = {\n      ...param,\n      value: newParamValue,\n    };\n    setParams(newParams);\n  }\n\n  return <div style={{ opacity: isFocused || isError ? 1 : 0.5 }}>\n    <ListItem button onClick={onClick}>\n      <ListItemAvatar>\n        <Avatar>{index + 1}</Avatar>\n      </ListItemAvatar>\n      <ListItemText\n        primary={tool.name}\n        secondary={\n          <React.Fragment>\n\n            {/* {tool.inputType + ' > ' + tool.outputType} */}\n            {/* <br/> */}\n            {tool.getHistoryDescription()}\n          </React.Fragment>\n        } />\n      <IconButton aria-label=\"delete tool from all steps\" onClick={(event) => {\n        event.stopPropagation();\n        onDelete();\n      }}>\n        <Clear></Clear>\n      </IconButton>\n    </ListItem>\n    {isError && <Alert severity=\"error\">This doesn't work!</Alert>}\n    {params &&\n      <Box ml={2} mr={2}>\n        <Box mb={1}>\n          <Typography variant='overline'>Parameters</Typography>\n        </Box>\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          return updateParams();\n        }} autoComplete='off'>\n          {Object.keys(params).map((key, index) => {\n            const param = params[key];\n\n            if (isMultipleChoiceParam(param)) {\n              return <Box my={2}>\n                <FormControl>\n                  <InputLabel id={`${param.name}-label`}>{param.name}</InputLabel>\n                  <Select\n                    value={param.value}\n                    labelId={`${param.name}-label`}\n                    label={param.name}\n                    onChange={(event) => {\n                      onParamChange(param, key, event.target.value);\n                    }}\n                  >\n                    {param.choices.map((choice, index) => {\n                      return <MenuItem key={index} value={choice}>{choice}</MenuItem>\n                    })}\n                  </Select>\n                </FormControl>\n              </Box>\n            } else {\n              return <TextField\n              fullWidth\n              key={index}\n              required={param.required}\n              label={param.name}\n              value={param.value}\n              onChange={(event) => {\n                onParamChange(param, key, event.target.value);\n              }}\n            >\n              {param.name}\n            </TextField>;\n            }\n          }\n          )}\n        </form>\n        <Button type='submit' onClick={(event) => {\n          updateParams();\n        }}>\n          Apply\n        </Button>\n      </Box>\n\n    }\n  </div>\n}\n\nexport default ToolListItem;","import { Box, Button, Card, CardContent, Tooltip, Typography } from \"@material-ui/core\";\nimport { ToolMap, ToolWithTypePath, TypeName } from \"../tools/types\";\n\ntype ToolListProps = {\n  toolMap: ToolMap;\n  addTool: (toolWithTypePath: ToolWithTypePath<any, any>) => void;\n  typePath: TypeName<any>[],\n};\n\nconst ToolList: React.FC<ToolListProps> = (props) => {\n  const { toolMap, addTool, typePath } = props;\n  return (\n    <div>\n      <Typography variant=\"overline\">{typePath.join(\" > \")}</Typography>\n      {Array.from(toolMap.self.keys()).map((outputType, index) => (\n        <Box mt={index > 0 ? 2 : 0}>\n          <Typography variant=\"overline\" color=\"text.secondary\" component=\"div\">\n            {outputType}\n          </Typography>\n          {toolMap.self.get(outputType)!.map((tool) => (\n            <Tooltip title={tool.description}>\n              <Box marginRight={1} component=\"span\">\n                <Button onClick={() => {\n                  return addTool({ ...tool, typePath });\n                }} variant=\"outlined\">\n                  {tool.name}\n                </Button>\n              </Box>\n            </Tooltip>\n          ))}\n        </Box>\n      ))}\n      {\n        toolMap.children &&\n        <Box mt={2}>\n          <Card variant=\"outlined\">\n            <CardContent>\n            <Typography gutterBottom variant=\"h6\">\n              For each list element\n            </Typography>\n              {\n              Array.from(toolMap.children.values()).map((value, index) => (\n                <ToolList key={index} toolMap={value} addTool={addTool} typePath={[...typePath, value.type]}></ToolList>\n              ))\n              }\n            </CardContent>\n          </Card>\n        </Box>\n        \n        \n      }\n    </div>\n  );\n};\n\nexport default ToolList;\n","import React, { useMemo, useState } from \"react\";\nimport \"./App.css\";\nimport { tools as allTools } from \"./tools/tools\";\nimport {\n  Tool,\n  Data,\n  ListData,\n  DataBuilder,\n  ChildrenToolMap,\n  SelfToolMap,\n  ToolMap,\n  ToolWithTypePath,\n} from \"./tools/types\";\nimport {\n  Box,\n  Checkbox,\n  createTheme,\n  CssBaseline,\n  Divider,\n  Drawer,\n  FormControlLabel,\n  Grid,\n  TextField,\n  ThemeProvider,\n  Typography,\n  useMediaQuery,\n} from \"@material-ui/core\";\nimport ToolListItem from \"./components/ToolListItem\";\nimport ToolList from \"./components/ToolList\";\nimport ReactJson from \"react-json-view\";\nimport { truncate } from \"./tools/string-utils\";\nimport { stringify } from \"./tools/string-tools\";\nimport JSON5 from \"json5\";\n\nconst theme = createTheme({\n  palette: {\n    mode: \"dark\",\n    primary: {\n      main: \"#FFFF00\",\n    },\n    text: {\n      primary: \"#FFFFFF\",\n    },\n    background: {\n      default: \"#201B2D\",\n      paper: \"#191622\",\n    },\n  },\n  typography: {\n    fontFamily: [\"Roboto Mono\", \"monospace\"].join(\",\"),\n  },\n});\n\nclass TransformationException {\n  constructor(index: number, value: any) {\n    this.index = index;\n    this.value = value;\n  }\n  index: number;\n  value: any;\n}\n\nconst getChildrenTools = (\n  tools: Tool<any, any>[],\n  data: ListData\n): ChildrenToolMap => {\n  const childrenTypesArray = Array.from(data.childrenTypes);\n  return childrenTypesArray\n    .map((type) => {\n      const child = data.children.find((child) => child.getType() === type)!;\n      const childTools = getToolsForData(tools, child);\n      // return childTools\n      // for (let entry of Array.from(childTools.self.entries())) {\n      //   const [key, toolList] = entry;\n      //   newSelf.set(key, toolList.map((tool) => ({\n      //     ...tool,\n      //     isElementWiseTool: true,\n      //   })));\n      // }\n      // const transformedToolMap = {\n      //   self: newSelf,\n      // }\n\n      // if (childTools.children) {\n      //   const newChildren = new Map() as ChildrenToolMap;\n      //   for (let entry of Array.from(childTools.children.entries())) {\n      //     const [key, toolMap] = entry;\n      //     newSelf.set(key, toolMap.map((tool) => ({\n      //       ...tool,\n      //       isElementWiseTool: true,\n      //     })));\n      //   }\n      //   // transformedToolMap.children = ;\n      // }\n      return childTools;\n      // return transformedToolMap;\n    })\n    .reduce((map, currValue, index) => {\n      return map.set(childrenTypesArray[index] + \"\", currValue);\n    }, new Map() as ChildrenToolMap);\n};\n\nconst getToolsForData = (tools: Tool<any, any>[], data: Data<any>): ToolMap => {\n  const usableTools = tools.filter(\n    (tool) => tool.inputType === \"any\" || tool.inputType === data.getType()\n  );\n  const toolsByCategory = usableTools.reduce((entryMap, e) => {\n    const categoryName =\n      e.inputType === e.outputType ? `${e.inputType} tools` : \"Transform\";\n    return entryMap.set(categoryName, [\n      ...(entryMap.get(categoryName) || []),\n      e,\n    ]);\n  }, new Map() as SelfToolMap);\n\n  if (data.getType() === \"list\") {\n    const childrenMap = getChildrenTools(tools, data as ListData);\n    return {\n      self: toolsByCategory,\n      type: data.getType(),\n      children: childrenMap,\n    };\n  }\n\n  return {\n    self: toolsByCategory,\n    type: data.getType(),\n  };\n};\n\nconst App: React.FC = () => {\n  const [selectedStepIndex, setSelectedStepIndex] = useState<\n    number | undefined\n  >(undefined);\n  const initialData = useMemo(() => DataBuilder.from(\"\"), []);\n  const [useJson5, setUseJson5] = useState(false);\n  const [stringifyListAsJson, setStringifyListAsJson] = useState(false);\n  const [toolHistory, setToolHistory] = useState<ToolWithTypePath<any, any>[]>(\n    []\n  );\n  const [currentStepIndex, currentData] = useMemo<[number, Data<any>]>(() => {\n    try {\n      const history =\n        selectedStepIndex !== undefined\n          ? toolHistory.slice(0, selectedStepIndex + 1)\n          : toolHistory;\n      const value = history.reduce((prevValue, currTool, currentIndex) => {\n        try {\n          return prevValue.transformedWith(currTool);\n          // if (currTool.typePath.length > 1) {\n          //   return (prevValue as ListData).childrenTransformedWith({\n          //     ...currTool,\n          //     typePath: currTool.typePath.slice(1),\n          //   });\n          // } else {\n          //   assert(\n          //     currTool.inputType === \"any\" ||\n          //       currTool.inputType === prevValue.getType()\n          //   );\n          //   return prevValue.transformedWith(currTool);\n          // }\n        } catch (e) {\n          throw new TransformationException(currentIndex - 1, prevValue);\n        }\n      }, initialData as Data<any>);\n      return [\n        Math.min(selectedStepIndex ?? Infinity, toolHistory.length - 1),\n        value,\n      ];\n    } catch (e) {\n      const exception = e as TransformationException;\n      return [exception.index, exception.value];\n    }\n  }, [initialData, toolHistory, selectedStepIndex]);\n\n  const fakeStep = useMemo(\n    () => (typeof currentData === \"string\" ? null : stringify),\n    [currentData]\n  );\n  const fullHistory = [...toolHistory];\n\n  const text: string = useMemo(() => {\n    if (currentData.getType() === 'json' || currentData.getType() === 'list') {\n      if (currentData.getType() === 'list' && !stringifyListAsJson) {\n        return currentData.get().join(',\\n');\n      }\n      if (useJson5) {\n        return JSON5.stringify(currentData.get(), {quote: '\"', space: 2});\n      } else {\n        return JSON.stringify(currentData.get(), null, 2);\n      }\n    } else {\n      return currentData.get() + \"\";\n    }\n  }, [currentData, stringifyListAsJson, useJson5]);\n\n  const wordCount = useMemo(() => text.trim().split(/\\s+/).length, [text]);\n\n  const addTool = (tool: ToolWithTypePath<any, any>) => {\n    const newToolHistory = toolHistory.slice(0, currentStepIndex + 1);\n\n    if (newToolHistory.length > 0) {\n      if (newToolHistory[newToolHistory.length - 1].name === \"Text input\") {\n        if (tool.name === \"Text input\") {\n          newToolHistory.pop();\n        }\n      }\n    }\n    newToolHistory.push(tool);\n    setToolHistory(newToolHistory);\n    setSelectedStepIndex(currentStepIndex + 1);\n    return;\n  };\n\n  const removeStep = (index: number) => {\n    setToolHistory(toolHistory.slice(0, index));\n  };\n\n  const onTextEdit = (oldValue: string, newValue: string) => {\n    addTool({\n      name: \"Text input\",\n      description: \"You typed this value in.\",\n      transform: (_) => {\n        return newValue;\n      },\n      inputType: \"any\",\n      outputType: \"string\",\n      typePath: [\"string\"],\n      getHistoryDescription: function () {\n        return `Entered \"${truncate(newValue)}\"`;\n      },\n    });\n  };\n\n  const currentDataType = currentData.getType();\n  const categorizedTools = getToolsForData(allTools, currentData);\n  const isLgDown = useMediaQuery(theme.breakpoints.down('lg'));\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\" style={{ display: \"flex\" }}>\n        <CssBaseline />\n        <Drawer\n          sx={{\n            width: 300,\n            flexShrink: 0,\n            \"& .MuiDrawer-paper\": {\n              width: 300,\n              boxSizing: \"border-box\",\n            },\n          }}\n          variant=\"permanent\"\n          anchor=\"left\"\n        >\n          <Box mt={4}>\n            <Box marginX={2}>\n              <Typography variant=\"h5\" gutterBottom>\n                Operations\n              </Typography>\n            </Box>\n            {fullHistory.length === 0 && (\n              <Box mx={2}>\n                <Typography variant=\"body1\" color=\"text.secondary\">\n                  Type something to begin\n                </Typography>\n              </Box>\n            )}\n            {fullHistory.map((tool, index) => (\n              <div>\n                <ToolListItem\n                  onClick={() => {\n                    setSelectedStepIndex(index);\n                  }}\n                  onDelete={() => {\n                    removeStep(index);\n                  }}\n                  key={index + \" \" + tool.name}\n                  {...{ tool }}\n                  updateTool={(tool) => {\n                    const newToolHistory = [...toolHistory];\n                    newToolHistory[index] = tool;\n                    setToolHistory(newToolHistory);\n                  }}\n                  index={index}\n                  isFocused={index === currentStepIndex}\n                  isError={\n                    index === currentStepIndex + 1 &&\n                    tool !== fakeStep &&\n                    index - 1 !== selectedStepIndex\n                  }\n                ></ToolListItem>\n                <Divider></Divider>\n              </div>\n            ))}\n          </Box>\n        </Drawer>\n        <Box\n          component=\"main\"\n          sx={{ flexGrow: 1, bgcolor: \"background.default\", p: 3 }}\n        >\n          <Grid container>\n            <Grid item xs={12} lg={6}>\n              <Typography variant=\"h3\" color=\"text.disabled\" gutterBottom>\n                txthlpr\n              </Typography>\n              {/* Current text:\n              <br />\n              <mark>{text}</mark>\n              <br /> */}\n              <form noValidate autoComplete=\"off\">\n                <TextField\n                  label=\"Input\"\n                  value={text}\n                  fullWidth\n                  onChange={(event) => onTextEdit(text, event.target.value)}\n                  minRows={20}\n                  maxRows={30}\n                  multiline\n                />\n              <div>\n                <Typography\n                  variant=\"overline\"\n                  color=\"text.secondary\"\n                  component=\"span\"\n                >\n                  {[\n                    `Type: ${currentDataType}`,\n                    `Characters: ${text.length}`,\n                    `Words: ${wordCount}`,\n                  ].join(\" | \")}\n                </Typography>\n              </div>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={useJson5}\n                    onChange={() => setUseJson5(!useJson5)}\n                    color=\"primary\"\n                  />\n                }\n                label=\"Use JSON5 formatting (for JSONs and lists)\"\n              />\n              </form>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={stringifyListAsJson}\n                    onChange={() => setStringifyListAsJson(!stringifyListAsJson)}\n                    color=\"primary\"\n                  />\n                }\n                label=\"Display list as JSON\"\n              />\n              <Box mt={4}>\n                <Typography variant=\"h6\" color=\"text.secondary\">\n                  Tools\n                </Typography>\n                <ToolList\n                  toolMap={categorizedTools}\n                  addTool={addTool}\n                  typePath={[currentData.getType()]}\n                />\n              </Box>\n            </Grid>\n            <Grid item xs={12} lg={6}>\n              <Box mx={isLgDown ? 0 : 4} my={isLgDown ? 4 : 0}>\n                <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n                  Current data structure\n                </Typography>\n                <ReactJson\n                  src={{ input: currentData.get() }}\n                  collapseStringsAfterLength={30}\n                  theme={{\n                    base00: \"1e1e3f\",\n                    base01: \"43d426\",\n                    base02: \"f1d000\",\n                    base03: \"808080\",\n                    base04: \"6871ff\",\n                    base05: \"c7c7c7\",\n                    base06: \"ff77ff\",\n                    base07: \"ffffff\",\n                    base08: \"d90429\",\n                    base09: \"f92a1c\",\n                    base0A: \"ffe700\",\n                    base0B: \"3ad900\",\n                    base0C: \"00c5c7\",\n                    base0D: \"6943ff\",\n                    base0E: \"ff2c70\",\n                    base0F: \"79e8fb\",\n                  }}\n                />\n              </Box>\n            </Grid>\n            <Grid item xs={12}></Grid>\n            <Grid item xs={6}></Grid>\n          </Grid>\n        </Box>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}